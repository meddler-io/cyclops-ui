parent.Report: {"meta": [], "description": "tempDescription", "data": [{"values": [{"value": "5e26ba18557f3d8c94e426f1", "key": "key", "name": "Gaana_Podcast.pdf", "_id": "5e26ba18557f3d8c94e426f1"}], "type": 5, "title": "<p>Static analysis report</p>", "identifier": "Identifier", "required": true, "multiple": false, "description": "<p>This report contains issues as per static source analysis OR use checkmarx shared user credentials for your team to review report in checkmarx.</p>", "editable": false}], "title": "Report", "id": "Please refer report or Use checkmarx shared \"user credentials\" to review the issues."}
parent.Please refer report or Use checkmarx shared "user credentials" to review the issues.: {"meta": [], "description": "tempDescription", "data": [{"values": [{"value": "5e26ba18557f3d8c94e426f1", "key": "key", "name": "Gaana_Podcast.pdf", "_id": "5e26ba18557f3d8c94e426f1"}], "type": 5, "title": "<p>Static analysis report</p>", "identifier": "Identifier", "required": true, "multiple": false, "description": "<p>This report contains issues as per static source analysis OR use checkmarx shared user credentials for your team to review report in checkmarx.</p>", "editable": false}], "title": "Report", "id": "Please refer report or Use checkmarx shared \"user credentials\" to review the issues."}
nested.Identifier: {"values": [{"key": "Stored", "selected": true, "value": "Stored"}, {"key": "Reflected", "selected": false, "value": "Reflected"}], "description": "<p>Xss Type Description</p>", "required": true, "editable": false, "identifier": "Identifier", "title": "<p>Xss Type</p>", "type": 3, "multiSelect": false}
file: {"editable": false, "type": 5, "identifier": "Identifier", "required": true, "values": [], "description": "<p>file path screenshot</p>", "multiple": false, "title": "<p>file path</p>"}
parent.Definition: {"title": "Definition ", "id": "Definition", "data": [{"editable": false, "type": 0, "value": "<p>Write <b>label</b> here</p>", "identifier": "information", "description": "<p>Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The adversary first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that he controls and get it to execute in the victim's browser (if he can trick the victim's into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection.</p>", "required": true, "title": "<p><b>Cross Site Tracing (XST)</b><br></p>"}], "meta": [], "description": "tempDescription"}
nested.def: {"title": "", "identifier": "def", "type": 0, "value": "", "editable": true, "required": true, "description": "Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user\u2019s identities temporarily or permanently. Compromising a system\u2019s ability to identify the client/user, compromises API security overall.", "tag": []}
details: "<p>sql injection issue sql query related&nbsp;</p>"
parent.Description: {"title": "Description", "id": "Description", "data": [{"editable": true, "type": 0, "value": "<p><b>Reference:</b></p>", "identifier": "Description", "description": "<p>Write Description</p>", "required": true, "title": "<p><b>Description</b></p>"}], "meta": [], "description": "tempDescription"}
nested.desc: {"title": "", "identifier": "desc", "type": 0, "value": "Here we manipulate the \"totalCost\" parameter to reduce the price of the order to Rs 1.", "editable": true, "required": true, "description": "", "tag": []}
parent.Mitigation: {"title": "Mitigation", "id": "Mitigation", "data": [{"editable": true, "type": 3, "required": true, "identifier": "Mitigation", "description": "<table width=\"98%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\"><tbody><tr><td valign=\"top\">Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.</td></tr><tr><td valign=\"top\">Patch web browser against known security origin policy bypass exploits.</td></tr></tbody></table>", "multiSelect": true, "title": "<p><b>Mitigation:</b></p>", "values": []}], "meta": [], "description": "tempDescription"}
nested.mit: {"title": "", "identifier": "mit", "type": 0, "value": "", "editable": true, "required": true, "description": "Never depend on status code 0, 1 or True , Fails, success , Fails code.\nAnd implement strong authentication server side validation and use min 6 digit OTP with rate limit.", "tag": []}
parent.Steps to Produce: {"title": "Steps to Produce", "id": "Steps to Produce", "data": [{"editable": true, "type": 0, "value": "<p><b>Referral:&nbsp;</b></p>", "identifier": "Steps to produce", "description": "<p>Step1:- Change the Host to www.msn.com.</p><p>Step2:- It can successfully injected the URL.</p><p>Step3:- The Host header is reflected in the response body and that a part of the Location header can be manipulated via user input.</p>", "required": true, "title": "<p><b>Steps to produce</b></p>"}], "meta": [], "description": "tempDescription"}
nested.steps: {"title": "", "identifier": "steps", "type": 0, "value": "Step1:- Select Debit Card as payment option and Capture the complete payment request.\nStep2:-Now change the \"totalCost\" parameter value fro Rs 14 to Rs 1.\nStep3:-Now forward this request and complete the modified payment of Rs 1 by using debit card.\nStep4:-Order is successfully placed with Rs 1.", "editable": true, "required": true, "description": "Steps:-", "tag": []}
parent.POC: {"title": "Proof of Concept", "description": "tempDescription", "id": "POC", "meta": [], "data": [{"type": 5, "multiple": false, "identifier": "Identifier", "editable": false, "values": [{"key": "key", "value": "5ed4ea00f7f31785060e7c96", "_id": "5ed4ea00f7f31785060e7c96", "name": "HtmlInjection.png"}], "description": "###### *Write Description*", "title": "##### Write Title", "required": true}]}
nested.poc: {"required": true, "editable": false, "value": "Stack trace disclosed the info. that axios/0.19.2 is being used for proxying requests to API Server.\n", "tag": [], "description": "", "identifier": "poc", "title": "", "type": 0}
parent.def: {"id": "def", "title": "Definition", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "def", "required": true, "tag": [], "title": "Definition", "description": "A brute-force attack is when an attacker uses a system of trial and error in an attempt to guess valid user credentials. These attacks are typically automated using wordlists of usernames and passwords. Automating this process, especially using dedicated tools, potentially enables an attacker to make vast numbers of login attempts at high speed.\n\nBrute-forcing is not always just a case of making completely random guesses at usernames and passwords. By also using basic logic or publicly available knowledge, attackers can fine-tune brute-force attacks to make much more educated guesses. This considerably increases the efficiency of such attacks. Websites that rely on password-based login as their sole method of authenticating users can be highly vulnerable if they do not implement sufficient brute-force protection."}]}
parent.desc: {"description": "tempDescription", "id": "desc", "meta": [], "data": [{"value": "Actuator endpoints allow you to monitor and interact with your Spring application. Spring Boot includes a number of built-in endpoints and you can also add your own. For example the health endpoint provides basic application health information. The following endpoints are available:\n", "identifier": "description", "required": true, "tag": [], "editable": true, "type": 0, "title": "Description", "description": "Security misconfigurations can not only expose sensitive user data, but also system details that may lead to full server compromise.Attackers will often attempt to find unpatched flaws, common endpoints, or unprotected files and directories to gain unauthorized access or knowledge of the system."}], "title": "Description"}
parent.mit: {"id": "mit", "title": "Mitigation", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "mit", "required": true, "tag": [], "title": "Mitigation", "description": "Lockout policy\u2014you can lock accounts after several failed login attempts and then unlock it as the administrator.\n\nProgressive delays\u2014you can lock out accounts for a limited amount of time after failed login attempts. Each attempt makes the delay longer.\n\nCaptcha\u2014tools like reCAPTCHA require users to complete simple tasks to log into a system. Users can easily complete these tasks while brute force tools cannot.\n\nRequiring strong passwords\u2014you can force users to define long and complex passwords. You should also enforce periodical password changes.\n\nTwo-factor authentication\u2014you can use multiple factors to authenticate identity and grant access to accounts."}]}
parent.stp: {"id": "stp", "title": "Steps to Produce", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "1. The request endpoint \"https://stageapi.entpmsg.com/dlr/v1/dlrStatus?transactionid=5345435435&reciepientid=43543543535&recipient=9910604331&sender=PRACTO&description=success_deli&totalpdu=1&message=testsms&deliverystatus=DELIVERY_SUCCESS&deliverydt=28-12-2022%2009:11:11&submitdt=28-12-2022%2009:11:10&corelationid=practo%7C%7C1ABJBGGHJ\" is missing authentication / authorization headers \n2. When we issue a request on mentioned endpoint , we notice that we are able to successfully post the request with a valid response back from the system.\n3. Since , we are able to issue a request and got a valid response back from system despite of the fact that there are no authentication / authorization headers present in the request , any user having access or idea about this API endpoint can issue the request which should not be the case", "identifier": "stp", "required": true, "tag": [], "title": "Steps to Produce", "description": ""}]}
nested.stp: {"identifier": "stp", "editable": true, "title": "", "required": true, "description": "Steps:-", "type": 0, "value": "Step1:- I have selected my ICICI debit card for payment and captured this request via proxy.\nStep2:- Now, I have changed the first 6 digit of my ICICI card with my HDFC credit card and successfully availed the discount offer on HDFC card. \nStep3:- And now I can finally pay it using my ICICI debit card.", "tag": []}
parent.PoC: {"id": "PoC", "title": "PoC", "data": [{"identifier": "Identifier", "type": 5, "description": "PoC:-", "title": "<p>Write Title</p>", "multiple": false, "required": true, "editable": false, "values": [{"key": "key", "name": "WhatsApp Image 2020-07-20 at 15.20.21.jpeg", "_id": "5f15694ec71f410fc5fccfad", "value": "5f15694ec71f410fc5fccfad"}]}], "description": "tempDescription", "meta": []}
parent.poc: {"description": "tempDescription", "data": [{"required": true, "editable": false, "value": "Stack trace disclosed the info. that axios/0.19.2 is being used for proxying requests to API Server.\n", "tag": [], "description": "", "identifier": "poc", "title": "", "type": 0}, {"multiple": false, "required": true, "editable": false, "values": [{"key": "key", "_id": "5ff88deed0bd74bd83a3af22", "value": "5ff88deed0bd74bd83a3af22", "name": "Screenshot 2021-01-08 at 10.21.58 PM.png"}], "tag": [], "description": "", "identifier": "attachments", "title": "", "extension": [], "type": 5}], "title": "Proof of concept", "id": "poc", "meta": []}
parent.mtg: {"id": "mtg", "title": "Mitigation", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "mtg", "required": true, "tag": [], "title": "Mitigation", "description": "#Developers must not rely on frontend for security of the application as it can be bypassed using any proxy tools intercept / repeater feature.\n #Always validate at server side the expected structure of the request with allowed parameter(s) and their values."}]}
nested.mtg: {"type": 0, "editable": false, "value": "Use authentication / authorization mechanism to validate and authorize the users requesting the resource after verifying the user is who they say they are and have the rights to perform the actions \\ view resources. ", "identifier": "mtg", "required": true, "tag": [], "title": "Mitigation", "description": "Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata.\n\nExcept for public resources, deny by default.\n\nImplement access control mechanisms once and re-use them throughout the application, including minimizing Cross-Origin Resource Sharing (CORS) usage.\n\nModel access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record.\n\nUnique application business limit requirements should be enforced by domain models.\n\nDisable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots.\n\nLog access control failures, alert admins when appropriate (e.g., repeated failures).\n\nRate limit API and controller access to minimize the harm from automated attack tooling.\n\nStateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it's highly recommended to follow the OAuth standards to revoke access."}
parent.Steps To Produce: {"title": "Steps To Produce", "id": "Steps To Produce", "data": [{"editable": false, "type": 0, "value": "<p>Write <b>label</b> here</p>", "identifier": "Steps To Produce", "description": "<p>Step 1:</p><p>Step 2:</p><p>Step 3:</p><p><br></p><p>.......</p>", "required": false, "title": "<p><b>Steps To Produce:</b></p>"}], "meta": [], "description": "tempDescription"}
parent.Proof Of Concept(PoC): {"title": "Proof Of Concept(PoC)", "id": "Proof Of Concept(PoC)", "data": [{"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept", "description": "<p>Write Description</p>", "multiple": false, "title": "<p><b>Proof Of Concept(PoC)</b></p>", "values": [{"value": "5e3400a45698ae45e1aed32e", "name": "10.jpeg", "_id": "5e3400a45698ae45e1aed32e", "key": "key"}, {"value": "5e3400a45698ae45e1aed32f", "name": "2.png", "_id": "5e3400a45698ae45e1aed32f", "key": "key"}, {"value": "5e3400a45698ae45e1aed330", "name": "1.png", "_id": "5e3400a45698ae45e1aed330", "key": "key"}, {"value": "5e3400a45698ae45e1aed331", "name": "4.png", "_id": "5e3400a45698ae45e1aed331", "key": "key"}, {"value": "5e3400a45698ae45e1aed332", "name": "7.png", "_id": "5e3400a45698ae45e1aed332", "key": "key"}, {"value": "5e3400a45698ae45e1aed333", "name": "8.png", "_id": "5e3400a45698ae45e1aed333", "key": "key"}, {"value": "5e3400a55698ae45e1aed334", "name": "9.png", "_id": "5e3400a55698ae45e1aed334", "key": "key"}, {"value": "5e3400a55698ae45e1aed335", "name": "3.png", "_id": "5e3400a55698ae45e1aed335", "key": "key"}, {"value": "5e3400a55698ae45e1aed336", "name": "5.png", "_id": "5e3400a55698ae45e1aed336", "key": "key"}, {"value": "5e3400a55698ae45e1aed337", "name": "6.png", "_id": "5e3400a55698ae45e1aed337", "key": "key"}]}], "meta": [], "description": "tempDescription"}
parent.df: {"id": "df", "title": "Definition", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "", "identifier": "df", "required": true, "tag": [], "title": "Definition", "description": "Session Not Invalidated After Logout"}]}
nested.df: {"type": 0, "editable": true, "value": "", "identifier": "df", "required": true, "tag": [], "title": "Definition", "description": "Session Not Invalidated After Logout"}
parent.dsc: {"id": "dsc", "title": "Description", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "dsc", "required": true, "tag": [], "title": "Description", "description": "A banner grab is performed by sending an HTTP request to the web server and examining its response header. This can be accomplished using a variety of tools, including telnet for HTTP requests, or openssl for requests over TLS/SSL.\n\n"}]}
nested.dsc: {"type": 0, "editable": false, "value": "", "identifier": "dsc", "required": true, "tag": [], "title": "Description", "description": "Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include:\n\nViolation of the principle of least privilege or deny by default, where access should only be granted for particular capabilities, roles, or users, but is available to anyone.\n\nBypassing access control checks by modifying the URL (parameter tampering or force browsing), internal application state, or the HTML page, or by using an attack tool modifying API requests.\n\nPermitting viewing or editing someone else's account, by providing its unique identifier (insecure direct object references)\n\nAccessing API with missing access controls for POST, PUT and DELETE.\n\nElevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user.\n\nMetadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation.\n\nCORS misconfiguration allows API access from unauthorized/untrusted origins.\n\nForce browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user."}
parent.mt: {"id": "mt", "title": "Mitigation", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "", "identifier": "mt", "required": true, "tag": [], "title": "Mitigation", "description": "Prevent user ability to manipulate session ID. Do not accept session IDs provided by the user's browser at login. Always generate a new session to which the user will log in if successfully authenticated.\nInvalidate any existing session identifiers prior to authorizing a new user session.\nFor platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again."}]}
nested.mt: {"type": 0, "editable": true, "value": "", "identifier": "mt", "required": true, "tag": [], "title": "Mitigation", "description": "Prevent user ability to manipulate session ID. Do not accept session IDs provided by the user's browser at login. Always generate a new session to which the user will log in if successfully authenticated.\nInvalidate any existing session identifiers prior to authorizing a new user session.\nFor platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again."}
parent.Proof Of Concept: {"title": "Proof Of Concept", "id": "Proof Of Concept", "data": [{"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept", "description": "<p>Write Description</p>", "multiple": false, "title": "<p><b>Proof Of Concept</b><br></p>", "values": []}], "meta": [], "description": "tempDescription"}
nested.Definition: {"editable": false, "type": 3, "required": true, "identifier": "Definition", "description": "<p>OS command injection (also known as shell injection) is a web security vulnerability that allows an attacker to execute arbitrary operating system (OS) commands on the server that is running an application, and typically fully compromise the application and all its data. Very often, an attacker can leverage an OS command injection vulnerability to compromise other parts of the hosting infrastructure, exploiting trust relationships to pivot the attack to other systems within the organization.</p>", "multiSelect": false, "title": "<p><b>OS Command Injection</b></p>", "values": []}
nested.Description: {"editable": true, "type": 0, "value": "<p><b>Reference:</b></p>", "identifier": "Description", "description": "<p>Write Description</p>", "required": true, "title": "<p><b>Description</b></p>"}
nested.Mitigation: {"editable": true, "type": 3, "required": true, "identifier": "Mitigation", "description": "<table width=\"98%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\"><tbody><tr><td valign=\"top\">Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.</td></tr><tr><td valign=\"top\">Patch web browser against known security origin policy bypass exploits.</td></tr></tbody></table>", "multiSelect": true, "title": "<p><b>Mitigation:</b></p>", "values": []}
nested.Steps to Produce: {"editable": true, "type": 0, "value": "<p><br></p>", "identifier": "Steps to Produce", "description": "<p>Directory listing<br></p><p><a href=\"http://172.29.66.116/cgi-bin/\">http://172.29.66.116/cgi-bin/</a><br></p><p><a href=\"http://172.29.66.116/icons/\">http://172.29.66.116/icons/</a><br></p><p><a href=\"https://172.29.66.116/manual/de/programs/htpasswd.html\">https://172.29.66.116/manual/de/programs/htpasswd.html</a><br></p>", "required": true, "title": "<p><b>Steps to Produce</b></p>"}
parent.Proof of Concept: {"title": "Proof of Concept", "id": "Proof of Concept", "data": [{"editable": false, "type": 5, "required": true, "identifier": "Proof of Concept", "description": "<p><a href=\"http://172.29.66.116/cgi-bin/\">http://172.29.66.116/cgi-bin/</a><br></p><p><a href=\"http://172.29.66.116/icons/\">http://172.29.66.116/icons/</a><br></p><p><a href=\"https://172.29.66.116/manual/de/programs/htpasswd.html\">https://172.29.66.116/manual/de/programs/htpasswd.html</a></p>", "multiple": false, "title": "<p><b>Proof of Concept</b></p>", "values": [{"value": "5e33d7355698ae45e1aed31a", "name": "1.png", "_id": "5e33d7355698ae45e1aed31a", "key": "key"}, {"value": "5e33d7f55698ae45e1aed31c", "name": "3.png", "_id": "5e33d7f55698ae45e1aed31c", "key": "key"}, {"value": "5e33d7f95698ae45e1aed31d", "name": "2.png", "_id": "5e33d7f95698ae45e1aed31d", "key": "key"}]}], "meta": [], "description": "tempDescription"}
nested.Proof Of Concept: {"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept", "description": "<p>Write Description</p>", "multiple": false, "title": "<p><b>Proof Of Concept</b><br></p>", "values": []}
parent.mitigation: {"title": "mitigation", "id": "mitigation", "data": [{"editable": true, "type": 0, "value": "<p><b>Referral:</b><a href=\"https://owasp.org/www-community/attacks/Cross_Site_Tracing\" style=\"font-family: var(--tabset-content-text-font-family); font-size: var(--tabset-content-text-font-size); font-weight: var(--tabset-content-text-font-weight);\">https://owasp.org/www-community/attacks/Cross_Site_Tracing</a></p>", "identifier": "Mitigation", "description": "<p>There are two general ways to defend against clickjacking:&nbsp;</p><p><b>Client-side methods </b>\u2013 the most common is called Frame Busting. Client-side methods can be effective in some cases, but are considered not to be a best practice, because they can be easily bypassed.&nbsp;</p><p><b>Server-side methods </b>\u2013 the most common is X-Frame-Options.&nbsp;<span style=\"color: var(--text-basic-color); font-family: var(--text-paragraph-font-family); font-size: var(--text-paragraph-font-size); font-weight: var(--text-paragraph-font-weight); background-color: var(--input-basic-disabled-background-color);\">Server-side methods are recommended by security experts as an effective way to defend against clickjacking.</span></p>", "required": true, "title": "<p><b>Mitigation</b></p>"}], "meta": [], "description": "tempDescription"}
nested.Steps To Produce: {"editable": false, "type": 0, "value": "<p>Write <b>label</b> here</p>", "identifier": "Steps To Produce", "description": "<p>Step 1:</p><p>Step 2:</p><p>Step 3:</p><p><br></p><p>.......</p>", "required": false, "title": "<p><b>Steps To Produce:</b></p>"}
parent.proof of concept: {"title": "proof of concept", "id": "proof of concept", "data": [{"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept", "description": "<p><br></p>", "multiple": false, "title": "<p><b>Proof Of Concept(PoC)</b></p>", "values": [{"value": "5e32beed5698ae45e1aed301", "name": "1.png", "_id": "5e32beed5698ae45e1aed301", "key": "key"}]}], "meta": [], "description": "tempDescription"}
parent.Details: {"id": "issues", "title": "Details", "description": "tempDescription", "meta": [], "data": [{"identifier": "Identifier", "value": "No issues were found during assessment!", "required": true, "title": "##### No issue found", "editable": false, "type": 0, "description": "###### Security assessment has been completed, and no issues were discovered!"}]}
parent.issues: {"id": "issues", "title": "Details", "description": "tempDescription", "meta": [], "data": [{"identifier": "Identifier", "value": "No issues were found during assessment!", "required": true, "title": "##### No issue found", "editable": false, "type": 0, "description": "###### Security assessment has been completed, and no issues were discovered!"}]}
parent.des : {"id": "des ", "title": "Description", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "", "identifier": "desc", "required": true, "tag": [], "title": "Description", "description": "Reverse tabnabbing is an attack where a page linked from the target page is able to rewrite that page, for example to replace it with a phishing site. As the user was originally on the correct page they are less likely to notice that it has been changed to a phishing site, especially if the site looks the same as the target. If the user authenticates to this new page then their credentials (or other sensitive data) are sent to the phishing site rather than the legitimate one.\n\nAs well as the target site being able to overwrite the target page, any http link can be spoofed to overwrite the target page if the user is on an unsecured network, for example a public wifi hotspot. The attack is possible even if the target site is only available via https as the attacker only needs to spoof the http site that is being linked to.\n\nThe attack is typically possible when the source site uses a target instruction in a html link to specify a target loading location that do not replace the current location and then let the current window/tab available and does not include any of the preventative measures detailed below.\n\nThe attack is also possible for link opened via the window.open javascript function."}]}
parent.Proof of concept: {"title": "Proof of concept", "id": "Proof of concept", "data": [{"editable": false, "type": 5, "required": true, "identifier": "Proof of concept", "description": "<p><br></p>", "multiple": false, "title": "<p><b>Proof of concept(PoC)</b></p>", "values": [{"value": "5e32c6bb5698ae45e1aed305", "name": "1.png", "_id": "5e32c6bb5698ae45e1aed305", "key": "key"}, {"value": "5e32c6bf5698ae45e1aed306", "name": "2.png", "_id": "5e32c6bf5698ae45e1aed306", "key": "key"}]}], "meta": [], "description": "tempDescription"}
parent.: {"data": [{"values": [{"key": "Stored", "selected": true, "value": "Stored"}, {"key": "Reflected", "selected": false, "value": "Reflected"}], "description": "<p>Xss Type Description</p>", "required": true, "editable": false, "identifier": "Identifier", "title": "<p>Xss Type</p>", "type": 3, "multiSelect": false}], "id": "", "description": "tempDescription", "title": "Additional Details", "meta": []}
parent.Steps to produce: {"title": "Steps to produce", "id": "Steps to produce", "data": [{"editable": true, "type": 0, "value": "<p><b>Referral:</b></p>", "identifier": "Steps To Produce", "description": "<p>Step1 :</p><p>Create any user ID with any email ID.&nbsp;</p>", "required": true, "title": "<p><b>Steps To Produce</b><br></p>"}], "meta": [], "description": "tempDescription"}
parent.No Issue: {"id": "No Issue", "title": "No Issue", "description": "tempDescription", "meta": [], "data": [{"identifier": "Description ", "value": "", "required": true, "title": "No Issue", "editable": true, "type": 0, "description": "No Issue"}]}
nested.Description : {"identifier": "Description ", "value": "", "required": true, "title": "No Issue", "editable": true, "type": 0, "description": "No Issue"}
parent.definition: {"title": "definition", "description": "tempDescription", "id": "definition", "meta": [], "data": [{"type": 0, "identifier": "Identifier", "editable": false, "value": "HTML injection is an attack that is similar to Cross-site Scripting (XSS). While in the XSS vulnerability the attacker can inject and execute Javascript code, the HTML injection attack only allows the injection of certain HTML tags. When an application does not properly handle user supplied data, an attacker can supply valid HTML code, typically via a parameter value, and inject their own content into the page. This attack is typically used in conjunction with some form of social engineering, as the attack is exploiting a code-based vulnerability and a user's trust.", "title": "##### Write Title", "description": "###### *Write Definition*", "required": true}]}
parent.description: {"title": "description", "id": "description", "data": [{"editable": true, "type": 0, "value": "<p><b>referral:</b></p>", "identifier": "Description", "description": "<p>No Email &amp; Password Length Restriction &amp; insufficient input validation(Metacharacters) leads to Denial of Service.<br></p><p>By sending a very long emailID, password, (908062.000+++ characters) it's possible to cause a denial of service attack on the server. This may lead to the website becoming unavailable or unresponsive. Usually this problem is caused by a vulnerable password hashing implementation. When a long password is sent, the password hashing process will result in CPU and memory exhaustion.<br></p>", "required": true, "title": "<p><b>Description</b></p>"}], "meta": [], "description": "tempDescription"}
parent.steps to produce: {"title": "steps to produce", "id": "steps to produce", "data": [{"editable": true, "type": 0, "value": "<p><b>Referral:</b></p>", "identifier": "Steps to Produce", "description": "<p>Step 1:</p><p>capture the request and add&nbsp;very long emailID, password, (908062.000+++ characters).</p><p>Step 2:&nbsp;</p><p>Attacker can automate this process using many threads.</p>", "required": true, "title": "<p><b>Steps to Produce</b></p>"}], "meta": [], "description": "tempDescription"}
nested.steps to produce : {"editable": true, "title": "Steps to Produce ", "type": 0, "identifier": "steps to produce ", "value": "You can find in these files : \n\"timesprime/timesprimeandroid/constants/TimesPrimeConstants.java\"\n\"timesprime/timesprimeandroid/models/RatingDataRequest.java\"", "required": true, "description": "<p>Write Description</p>"}
nested.POC: {"multiple": false, "values": [{"_id": "5f259001c0ef8953815e7d14", "name": "1.png", "value": "5f259001c0ef8953815e7d14", "key": "key"}, {"_id": "5f259006c0ef8953815e7d15", "name": "2.png", "value": "5f259006c0ef8953815e7d15", "key": "key"}, {"_id": "5f25900dc0ef8953815e7d16", "name": "3.png", "value": "5f25900dc0ef8953815e7d16", "key": "key"}, {"_id": "5f259025c0ef8953815e7d17", "name": "9.png", "value": "5f259025c0ef8953815e7d17", "key": "key"}, {"_id": "5f25902cc0ef8953815e7d18", "name": "10.png", "value": "5f25902cc0ef8953815e7d18", "key": "key"}, {"_id": "5f259038c0ef8953815e7d19", "name": "etcpasswd.png", "value": "5f259038c0ef8953815e7d19", "key": "key"}, {"_id": "5f259044c0ef8953815e7d1a", "name": "shadow.png", "value": "5f259044c0ef8953815e7d1a", "key": "key"}, {"_id": "5f259066c0ef8953815e7d1b", "name": "5.png", "value": "5f259066c0ef8953815e7d1b", "key": "key"}, {"_id": "5f25907ac0ef8953815e7d1c", "name": "2.png", "value": "5f25907ac0ef8953815e7d1c", "key": "key"}], "title": "POC", "editable": false, "type": 5, "identifier": "POC", "description": "", "required": true}
parent.step: {"id": "step", "title": "Steps to Produce", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "\nCreate the new user.\nUser the same create user request to edit the property of existing user", "identifier": "step", "required": true, "tag": [], "title": "", "description": "Steps:-"}]}
nested.step: {"title": "", "identifier": "step", "type": 0, "value": "Step 1: Try Login via OTP\nStep 2: Insert registered mobile number and generate OTP.\nStep 3: Insert wrong 4 Digit OTP and capture the response in proxy tool.\nStep 4 : Change Status parameter 0 to 1 and forward the response for successful account creation.\nStep 5: Here you will get an error of missing diner Id that we can easily generate with api \"/api/dinein/updateProfileExt\"", "editable": true, "required": true, "description": "Steps:-", "tag": []}
nested.miti: {"title": "", "identifier": "miti", "type": 0, "value": "Make sure you know all the possible flows to authenticate to the API (mobile/ web/deep links that\nimplement one-click authentication/etc.)\nAsk your engineers what flows you missed.\nRead about your authentication mechanisms. Make sure you understand what and how they are used.\nOAuth is not authentication, and neither is API keys.\nDon't reinvent the wheel in authentication, token generation, password storage. Use the standards.\nCredential recovery/forget password endpoints should be treated as login endpoints in terms of brute\nforce, rate limiting, and lockout protections.\nUse the OWASP Authentication Cheatsheet.\nWhere possible, implement multi-factor authentication.\nHere authenticate this API and map this api request with a particular user so that the authorization token for other users will not be generated.", "editable": true, "required": true, "description": "", "tag": []}
parent.Step To Reproduce: {"id": "Step To Reproduce", "title": "Step To Reproduce", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "Browse the application and check for the JQuery version used by application.", "identifier": "str", "required": true, "tag": [], "title": "<h1>Step To Reproduce</h1>", "description": ""}]}
nested.str: {"type": 0, "editable": true, "value": "Browse the application and check for the JQuery version used by application.", "identifier": "str", "required": true, "tag": [], "title": "<h1>Step To Reproduce</h1>", "description": ""}
nested.Upload your assessment : {"values": [{"value": "5e2585e6557f3d8c94e426eb", "key": "key", "name": "Gaana_Podcast - Security Issues.pdf", "_id": "5e2585e6557f3d8c94e426eb"}], "type": 5, "title": "<p><b>Dynamic analysis</b></p>", "identifier": "Upload your assessment ", "required": true, "multiple": false, "description": "<p>This report will contain issues reported as per dynamic analysis and please fix them as per their criticality.</p>", "editable": false}
nested.Steps To produce: {"type": 0, "required": true, "editable": true, "title": "Steps To produce", "description": "###### *Write Description*", "identifier": "Steps To produce", "value": "Refer PoC:"}
nested.Proof of Concept: {"editable": false, "type": 5, "required": true, "identifier": "Proof of Concept", "description": "<p><a href=\"http://172.29.66.116/cgi-bin/\">http://172.29.66.116/cgi-bin/</a><br></p><p><a href=\"http://172.29.66.116/icons/\">http://172.29.66.116/icons/</a><br></p><p><a href=\"https://172.29.66.116/manual/de/programs/htpasswd.html\">https://172.29.66.116/manual/de/programs/htpasswd.html</a></p>", "multiple": false, "title": "<p><b>Proof of Concept</b></p>", "values": [{"value": "5e33d7355698ae45e1aed31a", "name": "1.png", "_id": "5e33d7355698ae45e1aed31a", "key": "key"}, {"value": "5e33d7f55698ae45e1aed31c", "name": "3.png", "_id": "5e33d7f55698ae45e1aed31c", "key": "key"}, {"value": "5e33d7f95698ae45e1aed31d", "name": "2.png", "_id": "5e33d7f95698ae45e1aed31d", "key": "key"}]}
categories: {"values": [{"key": "Stored", "selected": true, "value": "Stored"}, {"key": "Reflected", "selected": false, "value": "Reflected"}], "description": "<p>Xss Type Description</p>", "required": true, "editable": false, "identifier": "Identifier", "title": "<p>Xss Type</p>", "type": 3, "multiSelect": false}
nested.sop: {"title": "", "identifier": "sop", "type": 0, "value": "Step1:- Use this API endpoint \"/api/dinein/updateProfileExt\" to generate Auth token for any user.\nStep2:- Change the mobile no. and you will be able to generate the Auth token for the user associated with that phoneNo.\nStep3:- Using phoneNo = 919887748484 we will getting token for user \"Eklavya Test 1\" and with phoneNo = 919588883751 we will getting token for user \"Eklavya Test 2\".", "editable": true, "required": true, "description": "Steps:-", "tag": []}
parent.des: {"id": "des", "title": "Description", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "des", "required": true, "tag": [], "title": "Description", "description": "A brute-force attack is when an attacker uses a system of trial and error in an attempt to guess valid user credentials. These attacks are typically automated using wordlists of usernames and passwords. Automating this process, especially using dedicated tools, potentially enables an attacker to make vast numbers of login attempts at high speed.\n\nBrute-forcing is not always just a case of making completely random guesses at usernames and passwords. By also using basic logic or publicly available knowledge, attackers can fine-tune brute-force attacks to make much more educated guesses. This considerably increases the efficiency of such attacks. Websites that rely on password-based login as their sole method of authenticating users can be highly vulnerable if they do not implement sufficient brute-force protection."}]}
nested.des: {"type": 0, "editable": false, "value": "Attacker can takeover the account of any non-registered user without OTP verification with the help of JWT token leaked by the API", "identifier": "des", "required": true, "tag": [], "title": "Description ", "description": "Account Takeover (ATO) is an attack whereby cybercriminals take ownership of online accounts using business logic flaws."}
parent.steps: {"title": "Steps to produce", "description": "tempDescription", "id": "steps", "meta": [], "data": [{"type": 0, "identifier": "Identifier", "editable": true, "value": "Refer POC :", "title": "##### Write Title", "description": "###### *Write Steps*", "required": true}]}
parent.Impact: {"id": "Impact", "title": "Impact", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "", "identifier": "des", "required": true, "tag": [], "title": "Impact", "description": "To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure."}]}
parent.imp: {"id": "imp", "title": "Impact", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "Note: Client-side JavaScript routines to validate user input are common in web applications, but it should not be concluded that every such application is vulnerable. \n\nThe application is exposed only if client-side validation is not replicated on the server, and even then only if crafted input that circumvents client-side validation can be used to cause some undesirable behavior by the application.", "identifier": "imp", "required": true, "tag": [], "title": "Impact", "description": "Impact"}]}
nested.imp: {"type": 0, "editable": false, "value": "Note: Client-side JavaScript routines to validate user input are common in web applications, but it should not be concluded that every such application is vulnerable. \n\nThe application is exposed only if client-side validation is not replicated on the server, and even then only if crafted input that circumvents client-side validation can be used to cause some undesirable behavior by the application.", "identifier": "imp", "required": true, "tag": [], "title": "Impact", "description": "Impact"}
parent.Remediation: {"id": "Remediation", "title": "Remediation", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "rem", "required": true, "tag": [], "title": "Remediation", "description": "Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection."}]}
parent.rmd: {"id": "rmd", "title": "Remediation", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "Kindly ensure all headers and query parameters are present / verified against expected data in request which are deemed to make valid request", "identifier": "rmd", "required": true, "tag": [], "title": "Remediation", "description": "Kindly ensure all headers and query parameters are present / verified against expected data in request which are deemed to make valid request"}]}
nested.rmd: {"type": 0, "editable": false, "value": "Kindly ensure all headers and query parameters are present / verified against expected data in request which are deemed to make valid request", "identifier": "rmd", "required": true, "tag": [], "title": "Remediation", "description": "Kindly ensure all headers and query parameters are present / verified against expected data in request which are deemed to make valid request"}
parent.Step to Reproduce: {"id": "Step to Reproduce", "title": "Step to Reproduce", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "CASE 1:\n\n1. Login to the application and leave it logged it.\n2. Wait for 1-2 days and application will not expire the token\n\nCASE 2:\n1. Logout to the application and old JWT token will still be useable even after logout", "identifier": "step", "required": true, "tag": [], "title": "Step to Reproduce", "description": ""}]}
parent.str: {"description": "tempDescription", "data": [{"required": true, "editable": false, "values": [], "multiSelect": false, "tag": [], "description": "", "identifier": "Steps to reproduce", "title": "", "type": 3}], "title": "Steps to reproduce", "id": "str", "meta": []}
parent.Steps to Reproduce: {"id": "Steps to Reproduce", "title": "Steps to Reproduce", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "1. Login to the application and go to \"Challenge\" and start any new challange.\n2. Now go to discussion section and add any new comment and take this request to the interceptor tool such as burp.\n3. Now forward the intercepted request to the intruder and send the same request multiple times ~10\n4. Now refresh and check the comment page, multiple data will be flooded at the same time.", "identifier": "Step to reproduce ", "required": true, "tag": [], "title": "<h1>Step To Reproduce</h1>", "description": ""}]}
nested.Step to reproduce : {"type": 0, "editable": true, "value": "1. Login to the application and go to \"Challenge\" and start any new challange.\n2. Now go to discussion section and add any new comment and take this request to the interceptor tool such as burp.\n3. Now forward the intercepted request to the intruder and send the same request multiple times ~10\n4. Now refresh and check the comment page, multiple data will be flooded at the same time.", "identifier": "Step to reproduce ", "required": true, "tag": [], "title": "<h1>Step To Reproduce</h1>", "description": ""}
parent.details: {"description": "tempDescription", "data": [{"required": true, "editable": false, "value": "A successful SSRF attack can often result in unauthorized actions or access to data within the organization, either in the vulnerable application itself or on other back-end systems that the application can communicate with. In some situations, the SSRF vulnerability might allow an attacker to perform arbitrary command execution.\n\nAn SSRF exploit that causes connections to external third-party systems might result in malicious onward attacks that appear to originate from the organization hosting the vulnerable application, leading to potential legal liabilities and reputational damage.", "tag": [], "description": "Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker's choosing.", "identifier": "details", "title": "Server-side request forgery (SSRF)", "type": 0}], "title": "Details", "id": "details", "meta": []}
nested.details: {"required": true, "editable": false, "value": "A successful SSRF attack can often result in unauthorized actions or access to data within the organization, either in the vulnerable application itself or on other back-end systems that the application can communicate with. In some situations, the SSRF vulnerability might allow an attacker to perform arbitrary command execution.\n\nAn SSRF exploit that causes connections to external third-party systems might result in malicious onward attacks that appear to originate from the organization hosting the vulnerable application, leading to potential legal liabilities and reputational damage.", "tag": [], "description": "Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make HTTP requests to an arbitrary domain of the attacker's choosing.", "identifier": "details", "title": "Server-side request forgery (SSRF)", "type": 0}
nested.DESCRIPTION: {"type": 0, "editable": true, "required": true, "description": "", "tag": [], "title": "", "value": "It was observed that forget password functionality is vulnerable to SSRF attack.\n- Vulnerable URL: http://54.145.204.207:9008/times/concierge/password/forget", "identifier": "DESCRIPTION"}
parent.Steps to reproduce: {"description": "tempDescription", "data": [{"required": true, "editable": false, "values": [], "multiSelect": false, "tag": [], "description": "", "identifier": "Steps to reproduce", "title": "", "type": 3}], "title": "Steps to reproduce", "id": "str", "meta": []}
nested.Steps to Reproduce: {"type": 0, "editable": true, "required": true, "description": "", "tag": [], "title": "", "value": "- Go to the forget password functionality and submit any email address and intercept that request\n- In the intercepted request change the host value with any other domain (for testing we have replaced the host value to our burp collaborator) and forward that request. Refer to the attached screenshot- SSRF-1.1.png and SSRF-1.2.png\n- Now wait for some time and we can see that the application is interacting with our supplied host URL. Refer to the attached screenshot- SSRF-1.3.png.", "identifier": "Steps to Reproduce"}
nested.definition: {"value": "", "identifier": "definition", "required": true, "tag": [], "editable": true, "type": 0, "title": "Definition", "description": "Security misconfiguration can happen at any level of the API stack, from the network level to the application level. Automated tools are available to detect and exploit misconfigurations such as unnecessary services or legacy options."}
nested.description: {"editable": true, "title": "Issue Description", "type": 0, "identifier": "description", "value": "Application is logging sensitive information like ssoid, mobile number, ticket number, primeID.", "required": true, "description": "<p>Write Description</p>"}
nested.mitigation: {"editable": true, "title": "Mitigation", "type": 0, "identifier": "mitigation", "value": "-assumenosideeffects class android.util.Log{*;}", "required": true, "description": "You should configure your application to remove Log class at final build time. To get this job done, Add the following code into the ProGuard config file."}
nested.steps to produce: {"value": "https://etservices2.indiatimes.com/health", "identifier": "steps to produce", "required": true, "tag": [], "editable": true, "type": 0, "title": "Steps to produce", "description": "Step:-"}
parent.proof: {"description": "tempDescription", "id": "proof", "meta": [], "data": [{"identifier": "proof of concept", "extension": [], "title": "Proof of Concept", "multiple": false, "required": true, "values": [{"_id": "5fdc6e44731deb9931dcc453", "value": "5fdc6e44731deb9931dcc453", "name": "1.png", "key": "key"}], "editable": false, "type": 5, "tag": [], "description": "PoC:-"}], "title": "Proof of concept"}
nested.proof of concept: {"identifier": "proof of concept", "extension": [], "title": "Proof of Concept", "multiple": false, "required": true, "values": [{"_id": "5fdc6e44731deb9931dcc453", "value": "5fdc6e44731deb9931dcc453", "name": "1.png", "key": "key"}], "editable": false, "type": 5, "tag": [], "description": "PoC:-"}
parent.DF: {"id": "DF", "title": "Definition", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "DF", "required": true, "tag": [], "title": "Definition", "description": "Authentication and authorization are two vital information security processes that administrators use to protect systems and information. Authentication verifies the identity of a user or service, and authorization determines their access rights. Although the two terms sound alike, they play separate but equally essential roles in securing applications and data. "}]}
nested.DF: {"type": 0, "editable": false, "value": "", "identifier": "DF", "required": true, "tag": [], "title": "Definition", "description": "Authentication and authorization are two vital information security processes that administrators use to protect systems and information. Authentication verifies the identity of a user or service, and authorization determines their access rights. Although the two terms sound alike, they play separate but equally essential roles in securing applications and data. "}
parent.Dscr: {"id": "Dscr", "title": "Description", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "dsc", "required": true, "tag": [], "title": "Description", "description": "Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include:\n\nViolation of the principle of least privilege or deny by default, where access should only be granted for particular capabilities, roles, or users, but is available to anyone.\n\nBypassing access control checks by modifying the URL (parameter tampering or force browsing), internal application state, or the HTML page, or by using an attack tool modifying API requests.\n\nPermitting viewing or editing someone else's account, by providing its unique identifier (insecure direct object references)\n\nAccessing API with missing access controls for POST, PUT and DELETE.\n\nElevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user.\n\nMetadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation.\n\nCORS misconfiguration allows API access from unauthorized/untrusted origins.\n\nForce browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user."}]}
parent.Mtg: {"id": "Mtg", "title": "Mitigation", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "Use authentication / authorization mechanism to validate and authorize the users requesting the resource after verifying the user is who they say they are and have the rights to perform the actions \\ view resources. ", "identifier": "mtg", "required": true, "tag": [], "title": "Mitigation", "description": "Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata.\n\nExcept for public resources, deny by default.\n\nImplement access control mechanisms once and re-use them throughout the application, including minimizing Cross-Origin Resource Sharing (CORS) usage.\n\nModel access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record.\n\nUnique application business limit requirements should be enforced by domain models.\n\nDisable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots.\n\nLog access control failures, alert admins when appropriate (e.g., repeated failures).\n\nRate limit API and controller access to minimize the harm from automated attack tooling.\n\nStateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it's highly recommended to follow the OAuth standards to revoke access."}]}
nested.ID: {"type": 5, "multiple": false, "editable": false, "values": [{"key": "key", "value": "6319c2ad74f36030b40f01e5", "_id": "6319c2ad74f36030b40f01e5", "name": "IntruderNorateimit.png"}, {"key": "key", "value": "6319c35674f36030b40f01e6", "_id": "6319c35674f36030b40f01e6", "name": "Intruder2.png"}], "identifier": "ID", "required": true, "tag": [], "extension": [], "title": "", "description": ""}
nested.Steps to Produce : {"editable": true, "type": 0, "value": "<p><b style=\"background-color: var(--input-basic-disabled-background-color); color: var(--tabset-content-text-color); font-family: var(--tabset-content-text-font-family); font-size: var(--tabset-content-text-font-size);\">Reference</b><b>:</b></p>", "identifier": "Steps to Produce ", "description": "<p>Step 1:</p><p>Accept on 6 any characters.&nbsp;</p>", "required": true, "title": "<p><b>Steps to Produce </b></p>"}
parent.Definition : {"title": "Definition ", "id": "Definition", "data": [{"editable": false, "type": 0, "value": "<p>Write <b>label</b> here</p>", "identifier": "information", "description": "<p>Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The adversary first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that he controls and get it to execute in the victim's browser (if he can trick the victim's into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection.</p>", "required": true, "title": "<p><b>Cross Site Tracing (XST)</b><br></p>"}], "meta": [], "description": "tempDescription"}
parent.Steps to produce : {"title": "Steps to produce ", "id": "Steps to produce ", "data": [{"editable": true, "type": 0, "value": "<p><b>Referral:</b></p>", "identifier": "Steps tp produce", "description": "<p>Step 1:</p><p>Capture the password reset request in proxy.</p><p>Step 2:</p><p>Generate password reset OTP.</p><p>Step 3:</p><p>Set your desired password of targeted user and send this request in OTP brute force attack.</p><p>Step 4:</p><p>Wait for some times (depends on your brute force attack speed) and your password will change.</p><p>Step 5:</p><p>Login with new password.</p>", "required": true, "title": "<p><b>Steps tp produce</b></p>"}], "meta": [], "description": "tempDescription"}
nested.Steps tp produce: {"editable": true, "type": 0, "value": "<p><b>Referral:</b></p>", "identifier": "Steps tp produce", "description": "<p>Step 1:</p><p>Capture the password reset request in proxy.</p><p>Step 2:</p><p>Generate password reset OTP.</p><p>Step 3:</p><p>Set your desired password of targeted user and send this request in OTP brute force attack.</p><p>Step 4:</p><p>Wait for some times (depends on your brute force attack speed) and your password will change.</p><p>Step 5:</p><p>Login with new password.</p>", "required": true, "title": "<p><b>Steps tp produce</b></p>"}
nested.Proof of concept: {"editable": false, "type": 5, "required": true, "identifier": "Proof of concept", "description": "<p><br></p>", "multiple": false, "title": "<p><b>Proof of concept(PoC)</b></p>", "values": [{"value": "5e32c6bb5698ae45e1aed305", "name": "1.png", "_id": "5e32c6bb5698ae45e1aed305", "key": "key"}, {"value": "5e32c6bf5698ae45e1aed306", "name": "2.png", "_id": "5e32c6bf5698ae45e1aed306", "key": "key"}]}
nested.dec: {"type": 0, "editable": false, "value": "", "identifier": "dec", "required": true, "tag": [], "title": "Description", "description": "A web application will usually provide various functionalities and features to users as per its business model . Issue occurs when the application does not properly validate client inputs and processes each and every request.\nThe user can brute force certain application feature with inputs not expected as well as the application serving all the requests believing in its filtering / validation module to work as expected for unexpected inputs.\nDue to implicit trust in client behaviour on various factors , application serves all requests with inputs of any type eventually leading to breaking of application's functionality in various ways and impacting users if such functionalities are public to all users of the application."}
nested.Definition : {"editable": true, "type": 0, "value": "<p><b>Referral:</b><a href=\"https://www.briskinfosec.com/blogs/blogsdetail/Host-Header-Attack\" style=\"font-family: var(--tabset-content-text-font-family); font-size: var(--tabset-content-text-font-size); font-weight: var(--tabset-content-text-font-weight);\">https://www.briskinfosec.com/blogs/blogsdetail/Host-Header-Attack</a></p>", "identifier": "Definition ", "description": "<p>URL injection is when a malicious individual attacks your website through the insertion of dangerous code that makes it appear as though your website gives credit to a detrimental site.<br></p><p>The Host header is reflected in the response body and that a part of the Location header can be manipulated via user input.<br></p>", "required": true, "title": "<p><b>Definition</b></p>"}
nested.Steps to produce: {"editable": true, "type": 0, "value": "<p><b>Note:- </b>Refer PoC</p>", "identifier": "Steps to produce", "description": "<p>Here I have changed the hostname from <b>172.29.66.116 </b>to www.msn.com.&nbsp;</p><p>I<span style=\"color: var(--text-basic-color); font-family: var(--text-paragraph-font-family); font-size: var(--text-paragraph-font-size); font-weight: var(--text-paragraph-font-weight); background-color: var(--input-basic-disabled-background-color);\">n response the location is changed to www.msn.com.</span></p><p>Later I captured the response via proxy and opened it in a browser, the page gets <b>redirected</b> to the 404 response page of www.msn.com.<br></p><p>Similarly,&nbsp;<span style=\"font-family: monospace, monospace; font-size: 1em; background-color: var(--input-basic-disabled-background-color); color: var(--tabset-content-text-color);\"><b>X-Forwarded-Host: www.msn.com</b></span><span style=\"color: var(--text-basic-color); font-family: var(--text-paragraph-font-family); font-size: var(--text-paragraph-font-size); font-weight: var(--text-paragraph-font-weight); background-color: var(--input-basic-disabled-background-color);\">&nbsp; can also be used.</span></p>", "required": true, "title": "<p><b>Steps to produce</b></p>"}
nested.Host Header Injection: {"editable": false, "type": 0, "value": "<p><b>Reference:&nbsp;</b><a href=\"https://www.briskinfosec.com/blogs/blogsdetail/Host-Header-Attack\" style=\"font-family: var(--tabset-content-text-font-family); font-size: var(--tabset-content-text-font-size); font-weight: var(--tabset-content-text-font-weight);\">https://www.briskinfosec.com/blogs/blogsdetail/Host-Header-Attack</a></p>", "identifier": "Host Header Injection", "description": "<p>It is common practice for the same web server to host several websites or web applications on the same IP address. This why the <em>host</em> header exists. The host header specifies which website or web application should process an incoming HTTP request. The web server uses the value of this header to dispatch the request to the specified website or web application. Each web application hosted on the same IP address is commonly referred to as a <em>virtual host</em>. So what constitutes a host header attack?</p><p>What happens if we specify an invalid Host Header? Most web servers are configured to pass the unrecognised host header to the first virtual host in the list. Therefore, it\u2019s possible to send requests with arbitrary host headers to the first virtual host.</p><p>Another way to pass arbitrary Host headers is to use the <b><em>X-Forwarded-Host</em> </b>header. In some configurations this header will rewrite the value of the Host header. Therefore it\u2019s possible to make the following request.</p>", "required": true, "title": "<p><b>Host header Injection</b><br></p>"}
parent.Step To Produce: {"meta": [], "id": "Step To Produce", "description": "tempDescription", "title": "Step To Produce", "data": [{"editable": true, "type": 0, "value": "<p><b>Note:- </b>Refer PoC</p>", "identifier": "Steps to produce", "description": "<p>Here I have changed the hostname from <b>172.29.66.116 </b>to www.msn.com.&nbsp;</p><p>I<span style=\"color: var(--text-basic-color); font-family: var(--text-paragraph-font-family); font-size: var(--text-paragraph-font-size); font-weight: var(--text-paragraph-font-weight); background-color: var(--input-basic-disabled-background-color);\">n response the location is changed to www.msn.com.</span></p><p>Later I captured the response via proxy and opened it in a browser, the page gets <b>redirected</b> to the 404 response page of www.msn.com.<br></p><p>Similarly,&nbsp;<span style=\"font-family: monospace, monospace; font-size: 1em; background-color: var(--input-basic-disabled-background-color); color: var(--tabset-content-text-color);\"><b>X-Forwarded-Host: www.msn.com</b></span><span style=\"color: var(--text-basic-color); font-family: var(--text-paragraph-font-family); font-size: var(--text-paragraph-font-size); font-weight: var(--text-paragraph-font-weight); background-color: var(--input-basic-disabled-background-color);\">&nbsp; can also be used.</span></p>", "required": true, "title": "<p><b>Steps to produce</b></p>"}]}
nested.Proof Of Concept (PoC): {"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept (PoC)", "description": "<p>All these PoCs are in accordance with the steps to produce</p>", "multiple": false, "title": "<p><b>Proof Of Concept (PoC)</b></p>", "values": [{"value": "5e32b3945698ae45e1aed2f8", "name": "1.png", "_id": "5e32b3945698ae45e1aed2f8", "key": "key"}, {"value": "5e32b39a5698ae45e1aed2f9", "name": "2.png", "_id": "5e32b39a5698ae45e1aed2f9", "key": "key"}, {"value": "5e32b4be5698ae45e1aed2fa", "name": "3.png", "_id": "5e32b4be5698ae45e1aed2fa", "key": "key"}]}
parent.dc: {"id": "dc", "title": "Description", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "", "identifier": "dc", "required": true, "tag": [], "title": "Description", "description": "It may be possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user\nAuthenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier, gives an attacker the opportunity to steal authenticated sessions.\nSuch a scenario is commonly observed when:\n[1] A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user\n[2] An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session\n[3] The application or container uses predictable session identifiers.\nIn the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server, using that session identifier. This gives the attacker access to the user's account through the active session.\nIt has been found that after a user signs out of the application, the identifiers that were used during the session were not invalidated. If the server fails to invalidate the session identifiers, it is possible for other users to use those identifiers to impersonate that user and perform actions on his behalf."}]}
nested.dc: {"type": 0, "editable": false, "value": "The API endpoints are not verifying the presence of all request headers and query parameters", "identifier": "dc", "required": true, "tag": [], "title": "Description", "description": "The API endpoints are not verifying the presence of all request headers and query parameters "}
parent.Steps To Reproduce: {"id": "str", "title": "Steps To Reproduce", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "1. Login to the application , record the session id and logout\n2. Login back after logout and compare the session id's and they are found to be same .\nHence , not invalidated / destroyed", "identifier": "str", "required": true, "tag": [], "title": "Steps to Reproduce", "description": ""}]}
parent.Title: {"id": "Title", "title": "Title", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "Validation of request headers and query parameters missing", "identifier": "title", "required": true, "tag": [], "title": "Title", "description": "Validation of request headers and query parameters missing"}]}
parent.title: {"id": "title", "title": "Title", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "", "identifier": "Title", "required": true, "tag": [], "title": "WPBakery Page Builder < 6.4.1 - Authenticated Stored Cross-Site Scripting (XSS)", "description": ""}]}
nested.Title: {"type": 0, "editable": false, "value": "", "identifier": "Title", "required": true, "tag": [], "title": "WPBakery Page Builder < 6.4.1 - Authenticated Stored Cross-Site Scripting (XSS)", "description": ""}
nested.Steps To Reproduce: {"type": 0, "editable": false, "value": "", "identifier": "Steps To Reproduce", "required": true, "tag": [], "title": "Steps To Reproduce", "description": ""}
nested.File Upload: {"type": 5, "multiple": false, "editable": false, "values": [{"key": "key", "value": "63206ae374f36030b40f0229", "_id": "63206ae374f36030b40f0229", "name": "wp_issue.png"}], "identifier": "File Upload", "required": true, "tag": [], "extension": ["jpeg", "pdf", "doc", "jpg", "txt"], "title": "", "description": ""}
nested.title: {"type": 0, "editable": false, "value": "Validation of request headers and query parameters missing", "identifier": "title", "required": true, "tag": [], "title": "Title", "description": "Validation of request headers and query parameters missing"}
parent.Infrastructure Scan Report: {"id": "report", "title": "Infrastructure Scan Report", "description": "tempDescription", "meta": [], "data": [{"multiple": false, "description": "", "required": true, "values": [{"name": "Banyan Tree.html", "_id": "5e74572b738d941eae3ac168", "key": "key", "value": "5e74572b738d941eae3ac168"}], "editable": false, "type": 5, "title": "Infrastructure Scan Report", "identifier": "Identifier"}]}
parent.report: {"id": "report", "title": "Infrastructure Scan Report", "description": "tempDescription", "meta": [], "data": [{"multiple": false, "description": "", "required": true, "values": [{"name": "Banyan Tree.html", "_id": "5e74572b738d941eae3ac168", "key": "key", "value": "5e74572b738d941eae3ac168"}], "editable": false, "type": 5, "title": "Infrastructure Scan Report", "identifier": "Identifier"}]}
nested.Remediation: {"type": 0, "editable": false, "value": "Do not rely on the client side response. Validate the user access through server side or using JWT instead of relying on server response.", "identifier": "Remediation", "required": true, "tag": [], "title": "", "description": ""}
nested.rem: {"type": 0, "editable": false, "value": "", "identifier": "rem", "required": true, "tag": [], "title": "Remediation", "description": "Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection."}
nested.Attachment : {"type": 5, "multiple": false, "editable": false, "values": [{"key": "key", "value": "625ea0eeaa6f2159e88b518e", "_id": "625ea0eeaa6f2159e88b518e", "name": "1.5.png"}, {"key": "key", "value": "625ea0f0aa6f2159e88b518f", "_id": "625ea0f0aa6f2159e88b518f", "name": "1.1.png"}, {"key": "key", "value": "625ea0f2aa6f2159e88b5190", "_id": "625ea0f2aa6f2159e88b5190", "name": "1.4.png"}, {"key": "key", "value": "625ea0f2aa6f2159e88b5191", "_id": "625ea0f2aa6f2159e88b5191", "name": "1.3.png"}, {"key": "key", "value": "625ea0f2aa6f2159e88b5192", "_id": "625ea0f2aa6f2159e88b5192", "name": "1.2.png"}], "identifier": "Attachment ", "required": true, "tag": [], "extension": ["jpeg", "jpg", "png", "html", "pdf", "doc"], "title": "POC", "description": ""}
parent.Defination: {"id": "Defination", "title": "Defination", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": true, "value": "\nhttps://s3-ap-south-1.amazonaws.com/inrestomenuitems/", "identifier": "Defination", "required": false, "tag": [], "title": "Attacker can see the list of available files and folder available in mention S3 bucket.", "description": ""}]}
nested.Defination: {"type": 0, "editable": true, "value": "\nhttps://s3-ap-south-1.amazonaws.com/inrestomenuitems/", "identifier": "Defination", "required": false, "tag": [], "title": "Attacker can see the list of available files and folder available in mention S3 bucket.", "description": ""}
parent.Steps tp produce: {"id": "Steps tp produce", "title": "Steps tp produce", "description": "tempDescription", "meta": [], "data": [{"type": 0, "editable": false, "value": "Browse the application and S3 will be listable. you can also use awscli for same as shown in screenshot.", "identifier": "stp", "required": true, "tag": [], "title": "", "description": ""}]}
parent.DEFINITION: {"data": [{"title": "", "identifier": "DEFINITION", "type": 0, "value": "An attacker can change amount to this parameter and forward the request .. and will be able to order the product for less price or even Free.", "editable": true, "required": true, "description": "An attacker can change amount to this parameter and forward the request .. and will be able to order the product for less price or even Free", "tag": []}], "id": "DEFINITION", "title": "DEFINITION", "description": "tempDescription", "meta": []}
nested.DEF: {"value": "", "editable": true, "type": 0, "title": "", "tag": [], "required": true, "identifier": "DEF", "description": "Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application."}
parent.DESCRIPTION: {"data": [{"title": "", "identifier": "desc", "type": 0, "value": "Here we manipulate the \"totalCost\" parameter to reduce the price of the order to Rs 1.", "editable": true, "required": true, "description": "", "tag": []}], "id": "DESCRIPTION", "title": "DESCRIPTION", "description": "tempDescription", "meta": []}
nested.DESC: {"value": "", "editable": true, "type": 0, "title": "", "tag": [], "required": true, "identifier": "DESC", "description": "Web applications return a 301 or 302 response code to instruct web browsers to redirect to another URL. An open redirect vulnerability can exist when a web application leverages unsanitized user-supplied data (intended or not) to determine the destination of the redirection.\n\nA vulnerable application allows an attacker to craft a link having a destination URL that causes users to be redirected to the attacker\u2019s choice of sites. The link would appear to be benign to most people and when clicked, the redirection occurs seamlessly so users likely won\u2019t even notice it happened.\n\nGiven that redirection is functionality present in many web applications it is important for us to pay attention to the possible exploits. It may seem like a normal situation where a user decides which page she wants to go next, but if exploited, this vulnerability can have serious impacts, especially when used in conjunction with other attack techniques such as phishing or cross-site-scripting."}
parent.MITIGATION: {"data": [{"title": "", "identifier": "mitigation", "type": 0, "value": "", "editable": true, "required": true, "description": "1.Verify checksum.\n2.Don\u2019t take an amount value from the user at the final payment page.\n3.The dependency of payment success and failure is on parameters rather than checksum.It should be verified by success/failure checksum on the server side after that send this to the user.", "tag": []}], "id": "MITIGATION", "title": "MITIGATION", "description": "tempDescription", "meta": []}
nested.MIT: {"value": "", "editable": true, "type": 0, "title": "", "tag": [], "required": true, "identifier": "MIT", "description": "If possible, applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways:\nRemove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.\nMaintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.\nIf it is considered unavoidable for the redirection function to receive user-controllable input and incorporate this into the redirection target, one of the following measures should be used to minimize the risk of redirection attacks:\nThe application should use relative URLs in all of its redirects, and the redirection function should strictly validate that the URL received is a relative URL.\nThe application should use URLs relative to the web root for all of its redirects, and the redirection function should validate that the URL received starts with a slash character. It should then prepend http://yourdomainname.com to the URL before issuing the redirect.\nThe application should use absolute URLs for all of its redirects, and the redirection function should verify that the user-supplied URL begins with http://yourdomainname.com/ before issuing the redirect."}
parent.STEPS TO PRODUCE: {"data": [{"title": "", "identifier": "steps", "type": 0, "value": "Step1:- Select Debit Card as payment option and Capture the complete payment request.\nStep2:-Now change the \"totalCost\" parameter value fro Rs 14 to Rs 1.\nStep3:-Now forward this request and complete the modified payment of Rs 1 by using debit card.\nStep4:-Order is successfully placed with Rs 1.", "editable": true, "required": true, "description": "Steps:-", "tag": []}], "id": "STEPS TO PRODUCE", "title": "STEPS TO PRODUCE", "description": "tempDescription", "meta": []}
nested.STEPS: {"value": "The value of the Referer HTTP header is used to perform an HTTP redirect. The payload http://msn.com was submitted in the Referer HTTP header. This caused a redirection to the following URL:\nhttp://msn.com", "editable": true, "type": 0, "title": "", "tag": [], "required": true, "identifier": "STEPS", "description": "Steps:-"}
nested.Mitigation : {"type": 0, "required": true, "editable": true, "title": "Encrypt the data with a reliable encryption scheme before transmitting.\nWhen using web/Mobile applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.\nUse TLS 1.2\n", "description": "###### *Write Description*", "identifier": "Mitigation ", "value": "<p>Write <b>label</b> here</p>"}
nested.DEFINITION: {"title": "", "identifier": "DEFINITION", "type": 0, "value": "An attacker can change amount to this parameter and forward the request .. and will be able to order the product for less price or even Free.", "editable": true, "required": true, "description": "An attacker can change amount to this parameter and forward the request .. and will be able to order the product for less price or even Free", "tag": []}
parent.PROOF OF CONCEPT: {"data": [{"title": "", "identifier": "poc", "type": 5, "values": [{"value": "600675f7599d1830d71f5669", "_id": "600675f7599d1830d71f5669", "key": "key", "name": "1.png"}, {"value": "600675fb599d1830d71f566a", "_id": "600675fb599d1830d71f566a", "key": "key", "name": "2.png"}, {"value": "6006761f599d1830d71f566b", "_id": "6006761f599d1830d71f566b", "key": "key", "name": "Screenshot_20210105-161652.png"}], "extension": [], "editable": false, "multiple": false, "required": true, "description": "POC:-", "tag": []}], "id": "PROOF OF CONCEPT", "title": "PROOF OF CONCEPT", "description": "tempDescription", "meta": []}
nested.information: {"editable": false, "type": 0, "value": "<p>Write <b>label</b> here</p>", "identifier": "information", "description": "<p>Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The adversary first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get his or her malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that he controls and get it to execute in the victim's browser (if he can trick the victim's into visiting his malicious website or clicking on the link that he supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable him or her to get around the same origin policy protection.</p>", "required": true, "title": "<p><b>Cross Site Tracing (XST)</b><br></p>"}
parent.proof of concept(Poc): {"title": "proof of concept(Poc)", "id": "proof of concept(Poc)", "data": [{"editable": false, "type": 5, "required": true, "identifier": "PoC", "description": "<p>All these PoCs are in accordance with the steps to produce</p>", "multiple": false, "title": "<p><b>proof of concept(Poc)</b><br></p>", "values": []}], "meta": [], "description": "tempDescription"}
nested.PoC: {"editable": false, "type": 5, "required": true, "identifier": "PoC", "description": "<p>All these PoCs are in accordance with the steps to produce</p>", "multiple": false, "title": "<p><b>proof of concept(Poc)</b><br></p>", "values": []}
nested.MITIGATION: {"type": 0, "editable": true, "value": "", "identifier": "MITIGATION", "title": "", "tag": [], "required": true, "description": "It is recommended to implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist."}
parent.Mitigations:: {"title": "Mitigations:", "id": "Mitigations", "data": [{"editable": true, "type": 3, "required": true, "identifier": "Mitigations", "description": "<p>By far the most effective way to prevent OS command injection vulnerabilities is to never call out to OS commands from application-layer code. In virtually every case, there are alternate ways of implementing the required functionality using safer platform APIs.</p><p>If it is considered unavoidable to call out to OS commands with user-supplied input, then strong input validation must be performed. Some examples of effective validation include:</p><ul><li>Validating against a whitelist of permitted values.</li><li>Validating that the input is a number.</li><li>Validating that the input contains only alphanumeric characters, no other syntax or whitespace.</li></ul><p>Never attempt to sanitize input by escaping shell metacharacters. In practice, this is just too error-prone and vulnerable to being bypassed by a skilled attacker.</p>", "multiSelect": false, "title": "<p><b>Mitigation:</b></p>", "values": []}], "meta": [], "description": "tempDescription"}
parent.Mitigations: {"title": "Mitigations:", "id": "Mitigations", "data": [{"editable": true, "type": 3, "required": true, "identifier": "Mitigations", "description": "<p>By far the most effective way to prevent OS command injection vulnerabilities is to never call out to OS commands from application-layer code. In virtually every case, there are alternate ways of implementing the required functionality using safer platform APIs.</p><p>If it is considered unavoidable to call out to OS commands with user-supplied input, then strong input validation must be performed. Some examples of effective validation include:</p><ul><li>Validating against a whitelist of permitted values.</li><li>Validating that the input is a number.</li><li>Validating that the input contains only alphanumeric characters, no other syntax or whitespace.</li></ul><p>Never attempt to sanitize input by escaping shell metacharacters. In practice, this is just too error-prone and vulnerable to being bypassed by a skilled attacker.</p>", "multiSelect": false, "title": "<p><b>Mitigation:</b></p>", "values": []}], "meta": [], "description": "tempDescription"}
nested.Mitigations: {"editable": true, "type": 3, "required": true, "identifier": "Mitigations", "description": "<p>By far the most effective way to prevent OS command injection vulnerabilities is to never call out to OS commands from application-layer code. In virtually every case, there are alternate ways of implementing the required functionality using safer platform APIs.</p><p>If it is considered unavoidable to call out to OS commands with user-supplied input, then strong input validation must be performed. Some examples of effective validation include:</p><ul><li>Validating against a whitelist of permitted values.</li><li>Validating that the input is a number.</li><li>Validating that the input contains only alphanumeric characters, no other syntax or whitespace.</li></ul><p>Never attempt to sanitize input by escaping shell metacharacters. In practice, this is just too error-prone and vulnerable to being bypassed by a skilled attacker.</p>", "multiSelect": false, "title": "<p><b>Mitigation:</b></p>", "values": []}
nested.Step To Produce: {"editable": true, "type": 0, "value": "<p>Write <b>label</b> here</p>", "identifier": "Step To Produce", "description": "<p>Step 1:</p><p>Step 2:</p><p>Step 3:</p><p>......</p>", "required": true, "title": "<p><b>Step To Produce</b></p>"}
parent.Proof Of Concept : {"title": "Proof Of Concept ", "id": "Proof Of Concept ", "data": [{"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept ", "description": "<p>All these PoCs are in accordance with the steps to produce</p>", "multiple": false, "title": "<p>Proof Of Concept (PoC)</p>", "values": []}], "meta": [], "description": "tempDescription"}
nested.Proof Of Concept : {"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept ", "description": "<p>All these PoCs are in accordance with the steps to produce</p>", "multiple": false, "title": "<p>Proof Of Concept (PoC)</p>", "values": []}
nested.Proof of concept (PoC): {"title": "", "type": 5, "editable": false, "multiple": false, "description": "", "extension": ["png", "jpg", "jpeg"], "tag": [], "required": true, "values": [{"_id": "6051efc83bde2ec59fea0a90", "key": "key", "value": "6051efc83bde2ec59fea0a90", "name": "Original-API-Request.png"}, {"_id": "6051efc83bde2ec59fea0a91", "key": "key", "value": "6051efc83bde2ec59fea0a91", "name": "Modified-API-Request.png"}], "identifier": "Proof of concept (PoC)"}
parent.Poc(For GIRF): {"data": [{"tag": [], "required": true, "multiple": false, "description": "PoC:-", "extension": [], "title": "", "type": 5, "identifier": "poc1", "values": [{"name": "1 (4).png", "key": "key", "value": "6048f6e84d1b652913f5a833", "_id": "6048f6e84d1b652913f5a833"}, {"name": "4 (3).png", "key": "key", "value": "6048f6ef4d1b652913f5a834", "_id": "6048f6ef4d1b652913f5a834"}, {"name": "5 (2).png", "key": "key", "value": "6048f6f64d1b652913f5a835", "_id": "6048f6f64d1b652913f5a835"}, {"name": "3 (2).png", "key": "key", "value": "6048f6fc4d1b652913f5a836", "_id": "6048f6fc4d1b652913f5a836"}, {"name": "6 (1).png", "key": "key", "value": "6048f7024d1b652913f5a837", "_id": "6048f7024d1b652913f5a837"}, {"name": "7.png", "key": "key", "value": "6048f7074d1b652913f5a838", "_id": "6048f7074d1b652913f5a838"}], "editable": false}], "meta": [], "title": "Poc(For GIRF)", "id": "Poc(For GIRF)", "description": "tempDescription"}
nested.poc1: {"tag": [], "required": true, "multiple": false, "description": "PoC:-", "extension": [], "title": "", "type": 5, "identifier": "poc1", "values": [{"name": "1 (4).png", "key": "key", "value": "6048f6e84d1b652913f5a833", "_id": "6048f6e84d1b652913f5a833"}, {"name": "4 (3).png", "key": "key", "value": "6048f6ef4d1b652913f5a834", "_id": "6048f6ef4d1b652913f5a834"}, {"name": "5 (2).png", "key": "key", "value": "6048f6f64d1b652913f5a835", "_id": "6048f6f64d1b652913f5a835"}, {"name": "3 (2).png", "key": "key", "value": "6048f6fc4d1b652913f5a836", "_id": "6048f6fc4d1b652913f5a836"}, {"name": "6 (1).png", "key": "key", "value": "6048f7024d1b652913f5a837", "_id": "6048f7024d1b652913f5a837"}, {"name": "7.png", "key": "key", "value": "6048f7074d1b652913f5a838", "_id": "6048f7074d1b652913f5a838"}], "editable": false}
parent.Poc(For Event): {"data": [{"tag": [], "required": true, "multiple": false, "description": "PoC:-", "extension": [], "title": "", "type": 5, "identifier": "poc2", "values": [{"name": "9.png", "key": "key", "value": "6048f7244d1b652913f5a839", "_id": "6048f7244d1b652913f5a839"}, {"name": "11 (1).png", "key": "key", "value": "6048f72a4d1b652913f5a83a", "_id": "6048f72a4d1b652913f5a83a"}], "editable": false}], "meta": [], "title": "Poc(For Event)", "id": "Poc(For Event)", "description": "tempDescription"}
nested.poc2: {"tag": [], "required": true, "multiple": false, "description": "PoC:-", "extension": [], "title": "", "type": 5, "identifier": "poc2", "values": [{"name": "9.png", "key": "key", "value": "6048f7244d1b652913f5a839", "_id": "6048f7244d1b652913f5a839"}, {"name": "11 (1).png", "key": "key", "value": "6048f72a4d1b652913f5a83a", "_id": "6048f72a4d1b652913f5a83a"}], "editable": false}
nested.PROOF OF CONCEPT: {"editable": false, "extension": ["png", "jpg", "jpeg"], "description": "", "identifier": "PROOF OF CONCEPT", "title": "", "values": [{"name": "Screenshot 2021-03-08 at 12.43.14 PM.png", "value": "607d5d02104f9a4e38b53f81", "_id": "607d5d02104f9a4e38b53f81", "key": "key"}, {"name": "Screenshot 2021-03-08 at 12.42.53 PM.png", "value": "607d5d02104f9a4e38b53f82", "_id": "607d5d02104f9a4e38b53f82", "key": "key"}], "multiple": false, "required": true, "type": 5, "tag": []}
nested.Report: {"multiple": false, "editable": false, "identifier": "Report", "extension": ["pdf"], "description": "", "type": 5, "required": true, "title": "MobSF Static Analysis Report", "tag": [{"display": "report", "value": "report"}], "values": [{"name": "tp_apk.pdf", "_id": "6039feab55c01b68763a8f2b", "value": "6039feab55c01b68763a8f2b", "key": "key"}]}
nested.Risk: {"editable": false, "identifier": "Risk", "tag": [], "description": "", "type": 3, "required": true, "title": "Risk Score", "multiSelect": false, "values": [{"selected": false, "value": "Low", "key": "Low"}, {"selected": false, "value": "Medium", "key": "Medium"}, {"selected": true, "value": "High", "key": "High"}, {"selected": false, "value": "Critical", "key": "Critical"}]}
nested.Details: {"editable": false, "identifier": "Details", "description": "", "type": 0, "required": true, "value": "Please find the attached document for detailed report", "tag": [], "title": ""}
parent.Defintion: {"title": "Definition", "id": "Defintion", "data": [{"editable": true, "type": 0, "value": "<p><b>Reference:-</b><a href=\"https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/directory-listing-apache/\" style=\"font-family: var(--tabset-content-text-font-family); font-size: var(--tabset-content-text-font-size); font-weight: var(--tabset-content-text-font-weight);\">https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/directory-listing-apache/</a></p>", "identifier": "Definition", "description": "<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analysing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.<br></p>", "required": true, "title": "<p><b>Definition</b></p>"}], "meta": [], "description": "tempDescription"}
nested.Steps To Produce : {"description": "IOS :\nStep 1 : Install ipa file to ios device using xcode devices and simulators options \nStep 2 : Run your application completely\nStep 3 : Download container using  xcode devices and simulators options \nStep 4 : Search all sensitive information in DB file, cookie, cache, preferences files etc.\nAndroid :\nStep 1 : Install you apk to rooted android Device\nStep 2 : Run your application completely \nStep 3 : Go to Device storage > Internal storage > Data > Data > com.package folder \nStep 4 : Search all sensitive information in DB file, cookie, cache, preferences files etc.\n", "type": 0, "identifier": "Steps To Produce ", "value": "", "title": "Steps To Produce ", "required": true, "editable": true}
parent.test: {"title": "test", "meta": [], "description": "tempDescription", "data": [], "id": ""}
nested.Steps to reproduce: {"required": true, "editable": false, "values": [], "multiSelect": false, "tag": [], "description": "", "identifier": "Steps to reproduce", "title": "", "type": 3}
nested.attachments: {"multiple": false, "required": true, "editable": false, "values": [{"key": "key", "_id": "5ff88deed0bd74bd83a3af22", "value": "5ff88deed0bd74bd83a3af22", "name": "Screenshot 2021-01-08 at 10.21.58 PM.png"}], "tag": [], "description": "", "identifier": "attachments", "title": "", "extension": [], "type": 5}
parent.Steps To Produce : {"title": "Steps To Produce ", "id": "Steps To Produce ", "data": [{"editable": true, "type": 0, "value": "<p><b>Reference:</b></p>", "identifier": "Steps To Produce", "description": "<p>Write Description</p>", "required": true, "title": "<p><b>Steps To Produce</b><br></p>"}], "meta": [], "description": "tempDescription"}
parent.in scope out of scope: {"title": "in scope out of scope", "description": "tempDescription", "id": "in scope out of scope", "meta": [], "data": [{"type": 0, "identifier": "in scope out of scope", "editable": true, "value": "Security Assessment done on Scope items.\nIn Scope: \nuat.gaana.com\na1.gaana.com\n\nOut of Scope :\napiv2.gaana.com\nlogs.gaana.com\ngsearch.gaana.com", "title": "In scope / out of scope", "description": "", "required": true}]}
nested.in scope out of scope: {"type": 0, "identifier": "in scope out of scope", "editable": true, "value": "Security Assessment done on Scope items.\nIn Scope: \nuat.gaana.com\na1.gaana.com\n\nOut of Scope :\napiv2.gaana.com\nlogs.gaana.com\ngsearch.gaana.com", "title": "In scope / out of scope", "description": "", "required": true}
parent.steps to reproduce: {"data": [{"editable": true, "title": "Steps to Produce", "type": 0, "identifier": "Steps to produce", "value": "adb devices\nList of devices attached\n192.168.56.101:5555     device\nadb logcat", "required": true, "description": "<p>Write Description</p>"}], "id": "steps to reproduce", "title": "steps to reproduce", "description": "tempDescription", "meta": []}
parent.Revalidation Status: {"title": "Revalidation Status", "meta": [], "description": "tempDescription", "data": [{"type": 5, "identifier": "Revalidation Status", "editable": false, "required": true, "title": "Revalidation Status", "description": "Fix all the remaining OPEN issues as per the detailed last security assessment report.\nFind the Revalidation Status report attached below:-", "multiple": false, "values": [{"name": "Manual Security Penetration Testing Revalidation Status of OBD Application(Web).pdf", "key": "key", "value": "5e9836473cf87fc663de3c86", "_id": "5e9836473cf87fc663de3c86"}]}], "id": "Revalidation Status"}
nested.Revalidation Status: {"type": 5, "identifier": "Revalidation Status", "editable": false, "required": true, "title": "Revalidation Status", "description": "Fix all the remaining OPEN issues as per the detailed last security assessment report.\nFind the Revalidation Status report attached below:-", "multiple": false, "values": [{"name": "Manual Security Penetration Testing Revalidation Status of OBD Application(Web).pdf", "key": "key", "value": "5e9836473cf87fc663de3c86", "_id": "5e9836473cf87fc663de3c86"}]}
parent.definition : {"title": "definition ", "id": "definition ", "data": [{"editable": true, "type": 0, "value": "<p><b>Referral:</b></p>", "identifier": "Definition", "description": "<p>A denial-of-service (DoS) attack is a type of cyber attack in which a malicious actor aims to render a computer or other device unavailable to its intended users by interrupting the device's normal functioning. DoS attacks typically function by overwhelming or flooding a targeted machine with requests until normal traffic is unable to be processed, resulting in denial-of-service to addition users. A DoS attack is characterized by using a single computer to launch the attack.</p>", "required": true, "title": "<p><b>Definition</b></p>"}], "meta": [], "description": "tempDescription"}
parent.Proof of concept(PoC): {"title": "Proof of concept(PoC)", "id": "Proof of concept(PoC)", "data": [{"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept", "description": "<p>All these PoCs are in accordance with the steps to produce</p>", "multiple": false, "title": "<p><b>Proof Of Concept(PoC)</b></p>", "values": [{"value": "5e3404d75698ae45e1aed343", "name": "1.png", "_id": "5e3404d75698ae45e1aed343", "key": "key"}, {"value": "5e3404d75698ae45e1aed344", "name": "2.png", "_id": "5e3404d75698ae45e1aed344", "key": "key"}]}], "meta": [], "description": "tempDescription"}
parent.Free Report: {"id": "Free Report", "title": "Free Report", "description": "tempDescription", "meta": [], "data": [{"multiple": false, "description": "Free Reports", "required": true, "values": [{"name": "Internal Network Penetration Test Report.pdf", "_id": "5e81e630738d941eae3ac183", "key": "key", "value": "5e81e630738d941eae3ac183"}], "editable": false, "type": 5, "title": "Free Report", "identifier": "Free Report"}]}
nested.Free Report: {"multiple": false, "description": "Free Reports", "required": true, "values": [{"name": "Internal Network Penetration Test Report.pdf", "_id": "5e81e630738d941eae3ac183", "key": "key", "value": "5e81e630738d941eae3ac183"}], "editable": false, "type": 5, "title": "Free Report", "identifier": "Free Report"}
nested.Proof Of Concept(PoC): {"editable": false, "type": 5, "required": true, "identifier": "Proof Of Concept(PoC)", "description": "<p>Write Description</p>", "multiple": false, "title": "<p><b>Proof Of Concept(PoC)</b></p>", "values": []}
parent.Information: {"title": "Information", "description": "tempDescription", "data": [{"description": "<p><b>Description</b>:</p><p>The application fails to prevent users from connecting to it over unencrypted connections. An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection<br></p>", "editable": false, "identifier": "Identifier", "value": "<p><b>Remediation</b>:</p><p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS<br></p>", "title": "<h2>Strict transport security not enforced</h2>", "type": 0, "required": true}], "meta": [], "id": ""}
parent.FilePath Traversal: {"data": [{"editable": false, "type": 5, "identifier": "Identifier", "required": true, "values": [], "description": "<p>file path screenshot</p>", "multiple": false, "title": "<p>file path</p>"}, {"editable": false, "value": "<p>file path</p>", "type": 0, "identifier": "Identifier", "required": true, "description": "<p>file label Description</p>", "title": "<p>file label</p>"}], "meta": [], "title": "FilePath Traversal", "description": "tempDescription", "id": "FilePath Traversal"}
parent.Directory: {"data": [{"multiSelect": true, "editable": true, "type": 3, "identifier": "Identifier", "required": true, "values": [{"key": "", "selected": false, "value": ""}, {"key": "age", "selected": false, "value": "age"}, {"key": "address", "selected": false, "value": "address"}], "description": "<p>ranjan Description</p>", "title": "<p>ranjan</p>"}, {"editable": false, "type": 4, "identifier": "Identifier", "required": true, "multi": false, "description": "<p>ranjanWrite Description</p>", "title": "<p>ranjan</p>", "values": [[127, 0, 0, 1]]}], "meta": [], "title": "Directory", "description": "tempDescription", "id": "directory"}
parent.directory: {"data": [{"multiSelect": true, "editable": true, "type": 3, "identifier": "Identifier", "required": true, "values": [{"key": "", "selected": false, "value": ""}, {"key": "age", "selected": false, "value": "age"}, {"key": "address", "selected": false, "value": "address"}], "description": "<p>ranjan Description</p>", "title": "<p>ranjan</p>"}, {"editable": false, "type": 4, "identifier": "Identifier", "required": true, "multi": false, "description": "<p>ranjanWrite Description</p>", "title": "<p>ranjan</p>", "values": [[127, 0, 0, 1]]}], "meta": [], "title": "Directory", "description": "tempDescription", "id": "directory"}
ip_addresses: {"editable": false, "type": 4, "identifier": "Identifier", "required": true, "multi": false, "description": "<p>ranjanWrite Description</p>", "title": "<p>ranjan</p>", "values": [[127, 0, 0, 1]]}
parent.sql injection: {"description": "tempDescription", "meta": [], "title": "sql injection", "data": [{"identifier": "Identifier", "value": "<p>sql injection issue sql query related&nbsp;</p>", "type": 0, "description": "<p>Write Description</p>", "required": true, "title": "<p>Write Title</p>", "editable": false}], "id": "sql injection"}
parent.Additional Details: {"data": [{"values": [{"key": "Stored", "selected": true, "value": "Stored"}, {"key": "Reflected", "selected": false, "value": "Reflected"}], "description": "<p>Xss Type Description</p>", "required": true, "editable": false, "identifier": "Identifier", "title": "<p>Xss Type</p>", "type": 3, "multiSelect": false}], "id": "", "description": "tempDescription", "title": "Additional Details", "meta": []}
